#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
visualize_training.py

This script visualizes training metrics, primarily the training loss,
from the logs generated by the Hugging Face Trainer. It expects to find
a 'trainer_state.json' file in the specified log directory.

This is a conversion of a typical Jupyter Notebook workflow for
visualizing training results (e.g., visualize-training.ipynb).
"""

import json
import os
import argparse
import matplotlib.pyplot as plt

def load_training_logs(log_dir):
    """
    Loads training logs from trainer_state.json.

    Args:
        log_dir (str): The directory containing the trainer_state.json file.

    Returns:
        list: A list of log entries (dictionaries), or None if logs cannot be found/parsed.
    """
    trainer_state_path = os.path.join(log_dir, "trainer_state.json")
    if not os.path.exists(trainer_state_path):
        print(f"Error: trainer_state.json not found directly in {log_dir}.")
        print(f"Please ensure '{log_dir}' is the correct directory containing 'trainer_state.json'.")
        print(f"This file is typically located in the root of the output directory specified during training,")
        print(f"or within a specific checkpoint folder (e.g., {os.path.join(log_dir, 'checkpoint-xxxx')}).")
        return None

    try:
        with open(trainer_state_path, 'r') as f:
            trainer_state = json.load(f)
        # log_history contains entries like {'loss': ..., 'learning_rate': ..., 'epoch': ..., 'step': ...}
        return trainer_state.get("log_history", [])
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {trainer_state_path}")
        return None
    except Exception as e:
        print(f"An error occurred while reading {trainer_state_path}: {e}")
        return None

def plot_metrics(log_history, metrics_to_plot, output_image_path="training_metrics.png", show_plot=False):
    """
    Plots specified metrics over steps.

    Args:
        log_history (list): A list of log entries from trainer_state.json.
        metrics_to_plot (list): A list of metric keys to plot (e.g., ['loss', 'eval_loss']).
        output_image_path (str): Path to save the generated plot.
        show_plot (bool): Whether to display the plot interactively.
    """
    if not log_history:
        print("No log history to plot.")
        return

    plt.figure(figsize=(12, 7))
    plot_has_data = False

    for entry in log_history:
        if "step" not in entry:
            continue # Skip entries without a step, like the initial state

        for metric_name in metrics_to_plot:
            if metric_name in entry:
                # Collect data for this metric if not already done
                if not hasattr(plot_metrics, f"{metric_name}_steps"):
                    setattr(plot_metrics, f"{metric_name}_steps", [])
                    setattr(plot_metrics, f"{metric_name}_values", [])
                
                getattr(plot_metrics, f"{metric_name}_steps").append(entry["step"])
                getattr(plot_metrics, f"{metric_name}_values").append(entry[metric_name])

    for metric_name in metrics_to_plot:
        steps = getattr(plot_metrics, f"{metric_name}_steps", [])
        values = getattr(plot_metrics, f"{metric_name}_values", [])
        if steps and values:
            plt.plot(steps, values, label=metric_name.replace("_", " ").title())
            plot_has_data = True
        else:
            print(f"No data found for metric: {metric_name}")

    # Cleanup dynamic attributes
    for metric_name in metrics_to_plot:
        if hasattr(plot_metrics, f"{metric_name}_steps"):
            delattr(plot_metrics, f"{metric_name}_steps")
        if hasattr(plot_metrics, f"{metric_name}_values"):
            delattr(plot_metrics, f"{metric_name}_values")

    if not plot_has_data:
        print("No data found for any of the specified metrics to plot.")
        return

    plt.xlabel("Steps")
    plt.ylabel("Value")
    plt.title("Training Metrics Over Steps")
    plt.legend()
    plt.grid(True)
    plt.savefig(output_image_path)
    print(f"Metrics plot saved to {output_image_path}")
    if show_plot:
        plt.show()

def main():
    parser = argparse.ArgumentParser(description="Visualize training metrics from Hugging Face Trainer logs.")
    parser.add_argument("--log_dir", type=str, required=True,
                        help="Directory containing the trainer_state.json file (e.g., the OUTPUT_DIR from training).")
    parser.add_argument("--metrics", type=str, nargs='+', default=["loss", "learning_rate"],
                        help="List of metrics to plot (e.g., loss eval_loss learning_rate). Default: loss learning_rate")
    parser.add_argument("--output_image", type=str, default="training_metrics.png",
                        help="Filename for the output plot image.")
    parser.add_argument("--show_plot", action="store_true",
                        help="Display the plot interactively in addition to saving it.")
    args = parser.parse_args()

    log_history = load_training_logs(args.log_dir)
    if log_history:
        plot_metrics(log_history, args.metrics, args.output_image, args.show_plot)

if __name__ == "__main__":
    main()